How To Use Git
 
//Git Pull Test
//Git Reset Test
//Git branch 생성후 병합 TEST 예정 i).git Merge 성공

Git Pull origin TEST //Remote repository -> Local repository 가져와서 합치기

1. Git 회원가입 및 로그인

2. Git Repository 생성

3. Git Clone -> Git Add -> Git Commit –m “Commit Context”-> Git Push



//터미널 명령어
Cd ..: 이동
Pwd : 현재 디렉토리s
Ls -al : file 목록
Mkdir : directory 생성



//vi 편집기
vi 수정할 txt file
입력모드 : i, a, o 입력모드 취소 esc
vi 편집모드 나가기 : ":"키 누른후 w저장 q나가기 wq!




//Git 명령어
Git Status : 현재 Git File or Folder 상태 (Add 됬는지 안됬는지)
Git Add : file을 tracked 상태로 변환, 해당 파일을 staging 영역에 저장
Git Commit : 확정
Git Push : Remote Repository에 추가
Git push origin branch name
Git rm : file을 Untracked 상태로 변환
Git log : Commit 내역 보여줌
Git branch : git branch 목록 보여줌
Git branch 'branchname' : branch 생성
Git pull : 새로운 커밋이있는 로컬 복사본을 업데이트하는 방법. 다른 사람과 공동 작업하는 경우 자주 실행하는 명령이다
Git fetch : https://backlog.com/git-tutorial/kr/stepup/stepup3_2.html
Git clone : remote repository에 있는거 그대로 로컬로 가져옴
Git checkout 'branchname' : branch 바꾸기
Git stash : 현재 디렉토리의 파일을 임시로 백업하고 깨끗한 상태로 돌린다, 현재 staging 영역에 있는 파일의 변경사항을스택에 넣어둔다.
Git merge : branch + master 합병후 branch 사라짐

//Git 단어
fast-forward : merge 할 브랜치(merge 될 대상 브랜치)의 commit이 현재 branch(기준 브랜치, master브랜치)의 commit보다 앞서가 있는 경우, 기준브랜치의 커밋을 대상 브랜치 commit으로 이동하겠다는 의미
